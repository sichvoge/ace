/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from https://raw.githubusercontent.com/mulesoft/api-workbench/master/grammars/raml.cson (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var RAMLHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            token: "punctuation.definition.comment.yaml",
            regex: /#/,
            push: [{
                token: "comment.line.number-sign.yaml",
                regex: /\Z|$/,
                next: "pop"
            }, {
                defaultToken: "comment.line.number-sign.yaml"
            }]
        }, {
            token: "constant.language.document.yaml",
            regex: /^---\s*$/
        }, {
            token: "constant.language.document.yaml",
            regex: /^\.\.\.\s*$/
        }, {
            token: [
                "constant.language.directive.yaml",
                "constant.language.version.yaml"
            ],
            regex: /^(%YAML\s+)(\d+\.\d+)$/
        }, {
            token: [
                "constant.language.tag.name.yaml",
                "constant.language.tag.uri.yaml"
            ],
            regex: /^%TAG\s+(\!(?:[^\!]*\!)?)\s+([^$]*)$/
        }, {
            token: [
                "markup.code.html.gfm",
                "punctuation.definition.entry.yaml",
                "entity.name.function.yaml",
                "entity.name.function.yaml",
                "punctuation.separator.key-value.yaml",
                "markup.code.html.gfm",
                "markup.code.html.gfm"
            ],
            regex: /^(\s*)((?:-\s*)?)(['"]?)(?:description|content)(['"]?\s*)(:)(\s*)(\||>)/,
            push: [{
                token: "markup.code.html.gfm",
                regex: /^(?!\s*\s+)(?=\s*(?:-|\S+\s*:|#))/,
                next: "pop"
            }, {
                token: "punctuation.definition.comment.yaml",
                regex: /#/,
                push: [{
                    token: "comment.line.number-sign.yaml",
                    regex: /$|^/,
                    next: "pop"
                }, {
                    defaultToken: "comment.line.number-sign.yaml"
                }]
            }, {
                include: "source.gfm"
            }, {
                defaultToken: "markup.code.html.gfm"
            }]
        }, {
            token: [
                "meta.key-value",
                "constant.character.method.yaml",
                "punctuation.colon.key-value.yaml",
                "meta.key-value",
                "string.single-quoted.yaml",
                "punctuation.definition.comment.yaml",
                "string.single-quoted.yaml"
            ],
            regex: /^(\s*)(is)(:)(\s*)(\[)(.*)(\])/,
            push: [{
                token: "meta.key-value",
                regex: /$|^/,
                next: "pop"
            }, {
                defaultToken: "meta.key-value"
            }]
        }, {
            token: [
                "meta.key-value",
                "constant.character.method.yaml",
                "punctuation.colon.key-value.yaml"
            ],
            regex: /^(\s*)(baseUri)(:)/,
            push: [{
                token: "meta.key-value",
                regex: /$|^/,
                next: "pop"
            }, {
                token: [
                    "punctuation.definition.comment.yaml",
                    "string.single-quoted.yaml"
                ],
                regex: /(\{)(\w*)/,
                push: [{
                    token: "punctuation.definition.comment.yaml",
                    regex: /\}/,
                    next: "pop"
                }]
            }, {
                defaultToken: "meta.key-value"
            }]
        }, {
            token: [
                "meta.resource",
                "entity.name.tag.yaml",
                "entity.name.tag.yaml",
                "string.single-quoted.yaml",
                "punctuation.definition.comment.yaml",
                "string.single-quoted.yaml",
                "entity.name.tag.yaml",
                "string.single-quoted.yaml",
                "punctuation.definition.comment.yaml",
                "string.single-quoted.yaml",
                "entity.name.tag.yaml",
                "string.single-quoted.yaml",
                "punctuation.definition.comment.yaml",
                "string.single-quoted.yaml",
                "entity.name.tag.yaml",
                "meta.resource"
            ],
            regex: /^([ \t]*)(\/)([^\{:]*)(?:(\{)([^\}]*)(\}))?((?:[^\{:]*)?)(?:(\{)([^\}]*)(\}))?((?:[^\{:]*)?)(?:(\{)([^\}]*)(\}))?([^\{:]*)(:)/,
            push: [{
                token: "meta.resource",
                regex: /$|^/,
                next: "pop"
            }, {
                token: "punctuation.definition.comment.yaml",
                regex: /#/,
                push: [{
                    token: "comment.line.number-sign.yaml",
                    regex: /\Z|$/,
                    next: "pop"
                }, {
                    defaultToken: "comment.line.number-sign.yaml"
                }]
            }, {
                include: "#scalars"
            }, {
                defaultToken: "meta.resource"
            }]
        }, {
            token: [
                "meta.resource",
                "support.type.function.yaml",
                "support.type.function.yaml",
                "meta.resource"
            ],
            regex: "^([ \\t]*)((?:\\d)+)(:)((?:\\![\\w\\!]+\\s+?)?|$|(?=#))",
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "^[ \\t]*((\\d)+)(:)((?:(\\![\\w\\!]+)\\s+?)?|\\Z|(?#))",
            push: [{
                token: "meta.resource",
                regex: /$|^/,
                next: "pop"
            }, {
                token: "punctuation.definition.comment.yaml",
                regex: /#/,
                push: [{
                    token: "comment.line.number-sign.yaml",
                    regex: /\Z|$/,
                    next: "pop"
                }, {
                    defaultToken: "comment.line.number-sign.yaml"
                }]
            }, {
                include: "#scalars"
            }, {
                defaultToken: "meta.resource"
            }]
        }, {
            token: [
                "meta.method",
                "constant.character.method.yaml",
                "punctuation.colon.key-value.yaml",
                "support.type.tag.yaml"
            ],
            regex: "^([ \\t]*)(get|post|put|patch|head|delete|options)(:)((?:\\![\\w\\!]+\\s+?)?|$)",
            TODO: "FIXME: regexp doesn't have js equivalent",
            originalRegex: "^[ \\t]*(get|post|put|patch|head|delete|options)(:)((?:(\\![\\w\\!]+)\\s+?)?|\\Z|(?#))",
            push: [{
                token: "meta.method",
                regex: /$|^/,
                next: "pop"
            }, {
                token: "punctuation.definition.comment.yaml",
                regex: /#/,
                push: [{
                    token: "comment.line.number-sign.yaml",
                    regex: /^|$/,
                    next: "pop"
                }, {
                    defaultToken: "comment.line.number-sign.yaml"
                }]
            }, {
                include: "#scalars"
            }, {
                defaultToken: "meta.method"
            }]
        }, {
            token: [
                "meta.key-value",
                "entity.name.function.yaml",
                "punctuation.colon.key-value.yaml",
                "meta.key-value",
                "constant.character.method.yaml",
                "punctuation.definition.comment.yaml"
            ],
            regex: /^([ \t]*)((?!\/)[^:]+)(:)(?:(\s*)(?:(\!include)|(Z)))?/,
            push: [{
                token: "meta.key-value",
                regex: /$|^/,
                next: "pop"
            }, {
                token: "punctuation.definition.comment.yaml",
                regex: /#/,
                push: [{
                    token: "comment.line.number-sign.yaml",
                    regex: /\Z|$/,
                    next: "pop"
                }, {
                    defaultToken: "comment.line.number-sign.yaml"
                }]
            }, {
                include: "#scalars"
            }, {
                defaultToken: "meta.key-value"
            }]
        }],
        "#boolean": [{
            token: "constant.language.boolean.yaml",
            regex: /\b(?:y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)\b/
        }],
        "#double-quote": [{
            token: [
                "punctuation.definition.string.begin.yaml",
                "string.double-quoted.yaml",
                "punctuation.definition.string.end.yaml"
            ],
            regex: /(")([^"]*)(")/
        }],
        "#float": [{
            token: [
                "constant.numeric.yaml",
                "text",
                "text",
                "text"
            ],
            regex: /([-+]?(?:[0-9],[0-9_]*)?\.[0-9.]*(?:[eE],[-+],[0-9]+)?)|([-+]?[0-9],[0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*)|([-+]?\.(?:inf|Inf|INF))|(\.(?:nan|NaN|NAN))/
        }],
        "#int": [{
            token: "constant.numeric.yaml",
            regex: /[-+]?(?:0|[1-9],[0-9_]*)/
        }],
        "#single-quote": [{
            token: [
                "punctuation.definition.string.begin.yaml",
                "string.single-quoted.yaml",
                "punctuation.definition.string.end.yaml"
            ],
            regex: /(')([^']*)(')/
        }],
        "#unquoted": [{
            token: "string.unquoted.yaml",
            regex: /.*?(?=$)/
        }],
        "#scalars": [{
            todo: {
                patterns: [{
                    begin: "#",
                    beginCaptures: {
                        0: {
                            name: "punctuation.definition.comment.yaml"
                        }
                    },
                    end: "\\Z|\\n",
                    name: "comment.line.number-sign.yaml"
                }, {
                    include: "#boolean"
                }, {
                    include: "#float"
                }, {
                    include: "#int"
                }, {
                    include: "#single-quote"
                }, {
                    include: "#double-quote"
                }, {
                    include: "#unquoted"
                }],
                repository: {
                    boolean: {
                        captures: {
                            1: {
                                name: "constant.language.boolean.yaml"
                            }
                        },
                        match: "\\b(y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF)\\b"
                    },
                    "double-quote": {
                        captures: {
                            1: {
                                name: "punctuation.definition.string.begin.yaml"
                            },
                            2: {
                                name: "string.double-quoted.yaml"
                            },
                            3: {
                                name: "punctuation.definition.string.end.yaml"
                            }
                        },
                        match: "(\")([^\"]*)(\")"
                    },
                    float: {
                        captures: {
                            1: {
                                name: "constant.numeric.yaml"
                            }
                        },
                        match: "([-+]?([0-9],[0-9_]*)?\\.[0-9.]*([eE],[-+],[0-9]+)?)|([-+]?[0-9],[0-9_]*(:[0-5]?[0-9])+\\.[0-9_]*)|([-+]?\\.(inf|Inf|INF))|(\\.(nan|NaN|NAN))"
                    },
                    int: {
                        captures: {
                            1: {
                                name: "constant.numeric.yaml"
                            }
                        },
                        match: "([-+]?(0|[1-9],[0-9_]*))"
                    },
                    "single-quote": {
                        captures: {
                            1: {
                                name: "punctuation.definition.string.begin.yaml"
                            },
                            2: {
                                name: "string.single-quoted.yaml"
                            },
                            3: {
                                name: "punctuation.definition.string.end.yaml"
                            }
                        },
                        match: "(')([^']*)(')"
                    },
                    unquoted: {
                        captures: {
                            1: {
                                name: "string.unquoted.yaml"
                            }
                        },
                        match: "(.*?)(?=$)"
                    }
                }
            }
        }],
        "#uri": [{
            token: "markup.underline.link.yaml",
            regex: /.*?(?=$)/
        }]
    }

    this.normalizeRules();
};

RAMLHighlightRules.metaData = {
    fileTypes: ["raml"],
    name: "RAML",
    scopeName: "source.raml"
}


oop.inherits(RAMLHighlightRules, TextHighlightRules);

exports.RAMLHighlightRules = RAMLHighlightRules;
});
